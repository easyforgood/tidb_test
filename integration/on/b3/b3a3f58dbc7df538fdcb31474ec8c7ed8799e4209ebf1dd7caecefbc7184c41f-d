// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/siplexy/Workplace/go/pkg/mod/github.com/shirou/gopsutil@v2.18.10+incompatible/mem/mem_darwin_cgo.go:1:1
// +build darwin
// +build cgo

package mem

/*
#include <mach/mach_host.h>
*/
import _ "unsafe"

import (
	"context"
	"fmt"
	"unsafe"

	"golang.org/x/sys/unix"
)

// VirtualMemory returns VirtualmemoryStat.
func VirtualMemory() (*VirtualMemoryStat, error) {
	return VirtualMemoryWithContext(context.Background())
}

func VirtualMemoryWithContext(ctx context.Context) (*VirtualMemoryStat, error) {
	count :=  /*line :25:11*/_Ctype_mach_msg_type_number_t /*line :25:35*/(( /*line :25:36*/_Ciconst_HOST_VM_INFO_COUNT /*line :25:55*/))
	var vmstat  /*line :26:13*/_Ctype_struct_vm_statistics /*line :26:35*/

	status := ( /*line :28:12*/_Cfunc_host_statistics /*line :28:28*/)( /*line :28:30*/_Ctype_host_t /*line :28:38*/(( /*line :28:39*/_Cfunc_mach_host_self /*line :28:54*/)()),
		( /*line :29:3*/_Ciconst_HOST_VM_INFO /*line :29:16*/),
		 /*line :30:3*/_Ctype_host_info_t /*line :30:16*/(unsafe.Pointer(&vmstat)),
		&count)

	if status != ( /*line :33:15*/_Ciconst_KERN_SUCCESS /*line :33:28*/) {
		return nil, fmt.Errorf("host_statistics error=%d", status)
	}

	pageSize := uint64(unix.Getpagesize())
	total, err := getHwMemsize()
	if err != nil {
		return nil, err
	}
	totalCount :=  /*line :42:16*/_Ctype_natural_t /*line :42:27*/(total / pageSize)

	availableCount := vmstat.inactive_count + vmstat.free_count
	usedPercent := 100 * float64(totalCount-availableCount) / float64(totalCount)

	usedCount := totalCount - availableCount

	return &VirtualMemoryStat{
		Total:       total,
		Available:   pageSize * uint64(availableCount),
		Used:        pageSize * uint64(usedCount),
		UsedPercent: usedPercent,
		Free:        pageSize * uint64(vmstat.free_count),
		Active:      pageSize * uint64(vmstat.active_count),
		Inactive:    pageSize * uint64(vmstat.inactive_count),
		Wired:       pageSize * uint64(vmstat.wire_count),
	}, nil
}
